from aiogram import types
import logging
#########################
from main import dp, bot
from data import *
import p2p
import sqlite

logger = logging.getLogger("bot.callback.bill")

@dp.callback_query_handler(lambda call: call.data == "buy3days")
async def callback(call: types.CallbackQuery) -> None:
	try:
		bill    = p2p.create_bill(SUBSCRIBE_3_DAYS)
		url     = bill[1]
		bill_id = bill[0]

		markup = types.InlineKeyboardMarkup().row(
			types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=url),
			types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"ipaid|{bill_id}|3"),
		)

		await bot.send_message(
			call.from_user.id, 
			f"<b>‚Ä¢ –î–û–°–¢–£–ü –ù–ê 3 –î–ù–Ø ‚Ä¢</b>\n\n\
–û–ø–ª–∞—Ç–∏—Ç–µ <b><a href=\"{bill[1]}\">—ç—Ç–æ—Ç —Å—á—ë—Ç</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.\n\
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úåüèª\"</b>.",
	   		reply_markup=markup
			)
	except Exception as ex:
		logger.error(ex)

@dp.callback_query_handler(lambda call: call.data == "buy7days")
async def callback(call: types.CallbackQuery) -> None:
	try:
		bill    = p2p.create_bill(SUBSCRIBE_7_DAYS)
		url     = bill[1]
		bill_id = bill[0]

		markup = types.InlineKeyboardMarkup().row(
			types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=url),
			types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"ipaid|{bill_id}|7"),
		)

		await bot.send_message(
			call.from_user.id, 
			f"<b>‚Ä¢ –î–û–°–¢–£–ü –ù–ê 7 –î–ù–ï–ô ‚Ä¢</b>\n\n\
–û–ø–ª–∞—Ç–∏—Ç–µ <b><a href=\"{bill[1]}\">—ç—Ç–æ—Ç —Å—á—ë—Ç</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.\n\
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úåüèª\"</b>.",
	   		reply_markup=markup
			)
	except Exception as ex:
		logger.error(ex)

@dp.callback_query_handler(lambda call: call.data == "buy30days")
async def callback(call: types.CallbackQuery) -> None:
	try:
		bill    = p2p.create_bill(SUBSCRIBE_30_DAYS)
		url     = bill[1]
		bill_id = bill[0]

		markup = types.InlineKeyboardMarkup().row(
			types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=url),
			types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"ipaid|{bill_id}|30"),
		)

		await bot.send_message(
			call.from_user.id, 
			f"<b>‚Ä¢ –î–û–°–¢–£–ü –ù–ê 30 –î–ù–ï–ô ‚Ä¢</b>\n\n\
–û–ø–ª–∞—Ç–∏—Ç–µ <b><a href=\"{bill[1]}\">—ç—Ç–æ—Ç —Å—á—ë—Ç</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.\n\
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úåüèª\"</b>.",
	   		reply_markup=markup
			)
	except Exception as ex:
		logger.error(ex)

@dp.callback_query_handler(lambda call: call.data == "buyforever")
async def callback(call: types.CallbackQuery) -> None:
	try:
		bill    = p2p.create_bill(SUBSCRIBE_FOREVER)
		url     = bill[1]
		bill_id = bill[0]

		markup = types.InlineKeyboardMarkup().row(
			types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=url),
			types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"ipaid|{bill_id}|0"),
		)

		await bot.send_message(
			call.from_user.id, 
			f"<b>‚Ä¢ –î–û–°–¢–£–ü –ù–ê–í–°–ï–ì–î–ê ‚Ä¢</b>\n\n\
–û–ø–ª–∞—Ç–∏—Ç–µ <b><a href=\"{bill[1]}\">—ç—Ç–æ—Ç —Å—á—ë—Ç</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.\n\
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úåüèª\"</b>.",
	   		reply_markup=markup
			)
	except Exception as ex:
		logger.error(ex)

@dp.callback_query_handler(lambda call: call.data.startswith("ipaid"))
async def callback(call: types.CallbackQuery) -> None:
	try:
		days      = int(call.data.split("|")[2])
		days_unix = days * 86400
		bill_id   = call.data.split("|")[1]
		status    = p2p.check_bill_state(bill_id)

		match status:
			case "PAID":
				await bot.delete_message(
					chat_id=call.from_user.id, 
					message_id=call.message.message_id
				)
				if days == 3:
					await bot.send_message(
						call.from_user.id, 
						"<b>–û–ø–ª–∞—á–µ–Ω–æ!</b> ‚úÖ\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 3 –¥–Ω—è."
					)
				elif days == 7:
					await bot.send_message(
						call.from_user.id, 
						"<b>–û–ø–ª–∞—á–µ–Ω–æ!</b> ‚úÖ\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π."
					)
				elif days == 30:
					await bot.send_message(
						call.from_user.id, 
						"<b>–û–ø–ª–∞—á–µ–Ω–æ!</b> ‚úÖ\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
					)
				elif days == 0:
					await bot.send_message(
						call.from_user.id, 
						"<b>–û–ø–ª–∞—á–µ–Ω–æ!</b> ‚úÖ\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞."
					)

				if sqlite.get_user_subtime(call.from_user.id) != 0:
					sqlite.add_user_subtime(call.from_user.id, days_unix)
			case "WAITING":
				await bot.send_message(
					call.from_user.id,
					f"<b>–°—á—ë—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.</b>\n–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ - —Å–æ–æ–±—â–∏—Ç–µ <b>{BOT_AUTHOR}</b>"
				)
			case "REJECTED" | "EXPIRED":
				await bot.send_message(
					call.from_user.id,
					"<b>–°—á—ë—Ç –∑–∞–∫—Ä—ã—Ç.</b>\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
				)
	except Exception as ex:
		logger.critical(ex)