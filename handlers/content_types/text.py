from aiogram import types
import time
import logging
#############################
from main import dp, bot
from data import BOT_AUTHOR, RATE_LIMIT
from unix import unix_to_date
from utils import rate_limit
from keyboards import subscribe_markup
import sqlite

logger = logging.getLogger("bot.handlers.content_types.text")

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(lambda message: "–ø—Ä–æ—Ñ–∏–ª—å" in message.text.lower())
async def profile(message: types.Message) -> None:
	try:
		samples        = sqlite.get_user_samples(message.from_user.id)
		subscribe_time = sqlite.get_user_subtime(message.from_user.id)
		subscribe_date = unix_to_date(subscribe_time)
		registration   = unix_to_date(sqlite.get_user_registration(message.from_user.id))
			
		time_now = int(time.time())

		if subscribe_time == 0:
			subscribe = "–ë–µ–∑–ª–∏–º–∏—Ç üéµ‚ö°Ô∏è"
		elif subscribe_time > time_now:
			subscribe = f"–¥–æ {subscribe_date}"
		elif subscribe_time < time_now or \
			 subscribe_time == time_now:
			subscribe = f"–∏—Å—Ç–µ–∫–ª–∞ {subscribe_date}"

		await message.answer(f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å id{message.from_user.id}</b>\n\
‚îú <b>–ü–æ–ª—É—á–µ–Ω–æ —Å—ç–º–ø–ª–æ–≤</b>: {samples}\n\
‚îú <b>–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É</b>: {registration}\n\
‚îî <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: {subscribe}")
	except Exception as ex:
		logger.warning(ex)

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(lambda message: "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" in message.text.lower())
async def feedback(message: types.Message) -> None:
	try:
		await message.answer(f"–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ \
–∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å. <b>{BOT_AUTHOR}</b>\n\n\
–§–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\
<b>1.</b> {message.from_user.id} (—ç—Ç–æ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)\n\
<b>2.</b> –°—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è\n\
<b>3.</b> –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π.\n\
<b>4.</b> –°–∫—Ä–∏–Ω—à–æ—Ç—ã/—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.")
	except Exception as ex:
		logger.warning(ex)

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(lambda message: "–ø–æ–¥–ø–∏—Å–∫–∞" in message.text.lower())
async def feedback(message: types.Message) -> None:
	try:
		subscribe_time = sqlite.get_user_subtime(message.from_user.id)
		subscribe_date = unix_to_date(subscribe_time)
		markup = subscribe_markup

		time_now = int(time.time())

		if subscribe_time == 0:
			subscribe = "–ë–µ–∑–ª–∏–º–∏—Ç üéµ‚ö°Ô∏è"
			access_samples = "–¥–æ—Å—Ç—É–ø–Ω–æ"
			markup = types.InlineKeyboardMarkup() # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —é–∑–µ—Ä–∞, –∫—É–ø–∏–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞
		elif subscribe_time > time_now:
			subscribe = f"<b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ</b> {subscribe_date}"
			access_samples = "–¥–æ—Å—Ç—É–ø–Ω–æ"
		elif subscribe_time < time_now or \
			 subscribe_time == time_now:
			subscribe = f"<b>–ò—Å—Ç–µ–∫–ª–∞</b> {subscribe_date}"
			access_samples = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

		await message.answer(
			f"<b>üé∂ –ü–æ–¥–ø–∏—Å–∫–∞ id{message.from_user.id}</b>\n‚îú <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ç–º–ø–ª–æ–≤</b>: {access_samples}\n‚îî {subscribe}", 
			reply_markup=markup
			)
	except Exception as ex:
		logger.warning(ex)

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(lambda message: "–ø–æ–º–æ—â—å" in message.text.lower())
async def feedback(message: types.Message) -> None:
	try:
		await bot.send_photo(message.chat.id, 
				"https://i.postimg.cc/rpzVt1v0/help.jpg", 
				caption=f"<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>\n\n\
–í—Å—ë –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å—ç–º–ø–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. \
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–π—Ç–µ <i>looperman.com</i> –≤—ã—Ö–æ–¥–∏—Ç –æ–¥–∏–Ω —Å–µ–º–ø–ª - –æ–Ω —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –í–∞–º!\n\
–°–∫–∞—á–∞—Ç—å –≤—ã –µ–≥–æ —Å–º–æ–∂–µ—Ç–µ <b>–ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ</b>, –ª–∏–±–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"<b>–°–∫–∞—á–∞—Ç—å</b> ‚¨áÔ∏è\".\n\n\
–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏. <b>{BOT_AUTHOR}</b>"
			)
	except Exception as ex:
		logger.warning(ex)

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(content_types=types.ContentType.TEXT)
async def feedback(message: types.Message) -> None:
	try:
		await message.reply("<b>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
	except Exception as ex:
		logger.warning(ex)