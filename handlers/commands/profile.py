from aiogram import types
import time
import logging
#############################
from main import dp
from data import RATE_LIMIT
from unix import unix_to_date
from utils import rate_limit
import sqlite

logger = logging.getLogger("bot.handlers.commands.profile")

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(commands=["profile", "–ø—Ä–æ—Ñ–∏–ª—å"])
async def profile(message: types.Message) -> None:
	try:
		samples        = sqlite.get_user_samples(message.from_user.id)
		subscribe_time = sqlite.get_user_subtime(message.from_user.id)
		subscribe_date = unix_to_date(subscribe_time)
		registration   = unix_to_date(sqlite.get_user_registration(message.from_user.id))
			
		time_now = int(time.time())

		if subscribe_time == 0:
			subscribe = "–ë–µ–∑–ª–∏–º–∏—Ç üéµ‚ö°Ô∏è"
		elif subscribe_time > time_now:
			subscribe = f"–¥–æ {subscribe_date}"
		elif subscribe_time < time_now or \
			 subscribe_time == time_now:
			subscribe = f"–∏—Å—Ç–µ–∫–ª–∞ {subscribe_date}"

		await message.answer(f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å id{message.from_user.id}</b>\n\
‚îú <b>–ü–æ–ª—É—á–µ–Ω–æ —Å—ç–º–ø–ª–æ–≤</b>: {samples}\n\
‚îú <b>–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É</b>: {registration}\n\
‚îî <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: {subscribe}")
	except Exception as ex:
		logger.warning(ex)
