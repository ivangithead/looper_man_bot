from aiogram import types
import time
import logging
######################################
from main import dp
from data import RATE_LIMIT
from keyboards import subscribe_markup
from unix import unix_to_date
from utils import rate_limit
import sqlite

logger = logging.getLogger("bot.handlers.commands.subscribe")

@rate_limit(limit=RATE_LIMIT)
@dp.message_handler(commands=["subscribe", "–ø–æ–¥–ø–∏—Å–∫–∞", "sub"])
async def subscribe(message: types.Message) -> None:
	try:
		subscribe_time = sqlite.get_user_subtime(message.from_user.id)
		subscribe_date = unix_to_date(subscribe_time)
		markup = subscribe_markup

		time_now = int(time.time())

		if subscribe_time == 0:
			subscribe = "–ë–µ–∑–ª–∏–º–∏—Ç üéµ‚ö°Ô∏è"
			access_samples = "–¥–æ—Å—Ç—É–ø–Ω–æ"
			markup = types.InlineKeyboardMarkup() # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —é–∑–µ—Ä–∞, –∫—É–ø–∏–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞

		elif subscribe_time > time_now:
			subscribe = f"<b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ</b> {subscribe_date}"
			access_samples = "–¥–æ—Å—Ç—É–ø–Ω–æ"

		elif subscribe_time < time_now or \
			 subscribe_time == time_now:
			subscribe = f"<b>–ò—Å—Ç–µ–∫–ª–∞</b> {subscribe_date}"
			access_samples = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

		await message.answer(
			f"<b>üé∂ –ü–æ–¥–ø–∏—Å–∫–∞ id{message.from_user.id}</b>\n‚îú <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ç–º–ø–ª–æ–≤</b>: {access_samples}\n‚îî {subscribe}", 
			reply_markup=markup
			)
	except Exception as ex:
		logger.warning(ex)